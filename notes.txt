Slate! Sliders Notes

***********************************************************
///////////////////////////////////////////////////////////

# General Game Notes

///////////////////////////////////////////////////////////
***********************************************************

# Problems

1. We want to make sure that we randomly generate a game board that contains the pattern solution.
    a. How do we make the solution board?
        i. Beginning of the game: generate a board 5x5 (initial board = A) -> player starts on this board.
        ii. To find the solution board: for N iterations (e.g at least, 5 moves and then as soon as there's no blank tile in the 3x3 center) swap the blank tile with a random adjacent tile.
        iii. At the end, you have the solution board (B) -> truncate the edges (3x3) -> give the target center to the player as goal.
2. How to get threads to work which will enable the timer to run in the program.

///////////////////////////////////////////////////////////

# MVP Engine Epics v1.0 (IRB Version)

- I can generate a target pattern
- I can select a slate and move it to another position
- I know whether I can move a slate to a desired position or not
- I can retrieve the state of all slates and know whether it's the correct pattern
- How do we test if moves are valid or not?
- How do we stop invalid slates from getting selected?

///////////////////////////////////////////////////////////

# Slate! Sliders Todos

- [x] Create 5x5 startup board
- [x] Create target pattern
- [x] Print board
- [x] Game movement
- [x] Timer
    - [ ] Timer Slider
- [ ] Ruby 2d
    - [x] Open window
    - [x] Move slates
    - [x] Display images
    - [x] Display start button and exit button
- [ ] Testing
    - [x] Window test

///////////////////////////////////////////////////////////

# Key Features

1.  What will be on the start screen?
2.  What will be on the end screen?

///////////////////////////////////////////////////////////

# Nice To Have Features

1. Timer
2. Timer slider


***********************************************************
///////////////////////////////////////////////////////////

# Game Program

///////////////////////////////////////////////////////////
***********************************************************

# Key parts of the game

# Three board data structures:
# 1. The 5x5 board game playing area.
# 2. To represent the current game state of the 3x3 inner slates.
# 3. To represent the target pattern (constant).
# Once the current game state equals the target pattern then the player has won.

# Methods we may need

# target_pattern (which is the puzzle to solve)
# start_up_board_pattern
# current_board_pattern


***********************************************************
///////////////////////////////////////////////////////////

# Game Patterns

///////////////////////////////////////////////////////////
***********************************************************

# 3X3 matrix
#         0     1     2
#    0 [(0,0),(0,1),(0,2)]
#    1 [(1,0),(1,1),(1,2)]
#    2 [(2,0),(2,1),(2,2)]

# Pattern
#   [1,2,4]
#   [5,5,6]
#   [4,3,5]

///////////////////////////////////////////////////////////

# 5X5 matrix
#         0     1     2     3     4
#    0 [(0,0),(0,1),(0,2),(0,3),(0,4)]
#    1 [(1,0),(1,1),(1,2),(1,3),(1,4)]
#    2 [(2,0),(2,1),(2,2),(2,3),(2,4)]
#    3 [(3,0),(3,1),(3,2),(3,3),(3,4)]
#    4 [(4,0),(4,1),(4,2),(4,3),(4,4)]

# Pattern
#   [5,6,6,6,5]
#   [3,3,2,3,6]
#   [4,2,0,4,6]
#   [1,4,6,5,4]
#   [4,3,4,1,4]
